-------------------------------------------------------------------------------
-- Tipos e constantes
-------------------------------------------------------------------------------

datatype NOMES = N1 | N2 | N3

datatype TELEFONES = T1 | T2 | T3

MAX = 3

EXEMPLO_AGENDA = <(N1,T1), (N2,T2), (N3, T3)>

-------------------------------------------------------------------------------
-- Funções
-------------------------------------------------------------------------------

fst((a,b)) = a
sec((a,b)) = b

last(<(n,t)>) = (n,t)
last(<(n,t)>^tail) = last(tail) 

-- nas funcoes a seguir, contatos representa uma lista cujos elementos são tuplas
-- na forma (n,t) onde n é do tipo NOMES e t é do tipo TELEFONES

-- retorna um conjunto com todos os nomes da lista
nomes(contatos) = 
	if(contatos == <>) then
		{}
	else 
		union({fst(head(contatos))}, nomes(tail(contatos)))

-- retorna a lista com o novo contato concatenado no fim
adi(contatos, n, t) = contatos^<(n,t)>

-- retorna o conjunto dos telefones associados ao contato n
tels(contatos, n) = 
	if(contatos == <>) then
		{}
	else if ( fst(head(contatos)) == n ) then
		union( {sec(head(contatos))} , tels(tail(contatos), n) )
	else
		tels(tail(contatos), n)

-- retorna a lista sem o contato n
rem(contatos, n) = 
		if (contatos == <>) then
			<>
		else if( fst(head(contatos)) == n ) then
			rem(tail(contatos), n)
		else
			<head(contatos)>^rem(tail(contatos), n)

-- muda o numero de um contato por outro
mod(contatos, n, t_atual, t_novo) = 
	if (contatos == <>) then
		<>
	else if (fst(head(contatos)) == n and sec(head(contatos)) == t_atual ) then
		<(fst(head(contatos)), t_novo)> ^ mod(tail(contatos), n, t_atual, t_novo)
	else
		<head(contatos)> ^ mod(tail(contatos), n, t_atual, t_novo)


-- retorna o conjunto de numeros que nao estao associados a um contato
nao_associados(contatos, n) = { t | t <- TELEFONES, not member(t,tels(contatos,n)) }

-- retorna o conjunto de numeros que sao diferentes do numero atual do contato
novos(contatos, n, t_atual) = { t | t <- TELEFONES, t != t_atual, not member(t, tels(contatos,n))  }

-- Função para unir duas agendas.
-- As agendas são sequencias de pares (NOMES, TELEFONES)
unir(agenda1, agenda2) = 
	if agenda2 == <> then -- Caso base. agenda2 foi toda percorrida, então retorna agenda1 já modificada com os contatos novos.
		agenda1

	else if member(fst(head(agenda2)), nomes(agenda1)) then -- Nome do contato na cabeça de agenda2 encontrado em agenda1

		-- Telefone do contato na cabeça de agenda2 encontrado em agenda1,
		-- então já existe esta combinacao de nome com telefone em agenda1,
		-- portanto não precisa adicionar
		if member(sec(head(agenda2)), tels(agenda1, fst(head(agenda2)))) then
			unir(agenda1, tail(agenda2))

		-- Telefone não encontrado. Portanto não existe a combinação do nome 
		-- corrente com o telefone corrente de agenda2 dentro de agenda1.
		-- Portanto precisa adicionar.
		else 
			unir(agenda1^<head(agenda2)>, tail(agenda2))

	else -- Nome do contato na cabeça de agenda2 não encontrado em agenda1, então precisa adicionar
		unir(agenda1^<head(agenda2)>, tail(agenda2))
		

-------------------------------------------------------------------------------
-- Canais e processos
-------------------------------------------------------------------------------

channel inserir : NOMES.TELEFONES
channel consultar : NOMES.Set(TELEFONES)
channel remover : NOMES
channel modificar : NOMES.TELEFONES.TELEFONES
channel migrar

AGENDA = Pagenda(<>)

-- insere apenas telefones que nao estao associados a um contato
-- consulta apenas os telefones dos contatos cadastrados
-- remove contatos cadastrados
-- modifica contatos cadastrados de forma que o novo numero seja diferente do atual
Pagenda(contatos) =
    #contatos < MAX & 
    inserir?n?t: nao_associados(contatos, n) -> Pagenda(adi(contatos, n, t))
    []
    consultar?n:nomes(contatos)!tels(contatos, n) -> Pagenda(contatos)
    []
    remover?n:nomes(contatos) -> Pagenda(rem(contatos, n))
    []
    modificar?n:nomes(contatos)
            ?t_atual:tels(contatos, n)
            ?t_novo:novos(contatos, n, t_atual) -> 
            Pagenda(mod(contatos, n, t_atual, t_novo))
    []
    migrar -> Pagenda(unir(contatos, EXEMPLO_AGENDA))