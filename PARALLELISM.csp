-- O CÓDIGO ABAIXO SIMULA O COMPORTAMENTO DE PARALELISMO ENTRE 
-- 3 COMPONENTES DE SOFTWARE DIVIDINDO UMA ÚNICA MEMÓRIA.
-- A MEMÓRIA SÓ PODE SER LIDA OU ESCRITA EXCLUSIVAMENTE POR UM COMPONENTE POR VEZ.

nametype DATA = {1..3}.{0..10}

channel write, read : DATA
channel left, right

		
COMP1(par) = 
	(
		-- ENVIA ID DO COMPONENTE E RECEBE UM INTEIRO DA MEMORIA ATRAVES DO CANAL READ E ATUALIZA O PARAMETRO DO PROCESSO
		(read.1?i -> COMP1(i))
		
		[]
		
		(
			-- CASO O PARAMETRO SEJA MAIOR QUE 5 ENTAO COMUNICA EVENTO "ESQUERDA"
			par > 5 & left -> COMP1(par)
			[]
			-- CASO O PARAMETRO SEJA MENOR OU IGUAL QUE 5 ENTAO COMUNICA EVENTO "DIREITA"
			par <= 5 & right -> COMP1(par)
		)
	)

		-- ENVIA ID DO COMPONENTE E RECEBE UM INTEIRO DA MEMORIA ATRAVES DO CANAL READ
COMP2 = read.2?i ->
	(
		-- CASO O INTEIRO LIDO DA MEMORIA SEJA MAIOR QUE 5 ENTÃO DECREMENTA O INTEIRO DA MEMORIA EM 1.
		i > 5 & write.2!(i-1) -> COMP2
		
		[]
		
		-- CASO O INTEIRO LIDO DA MEMORIA SEJA MENOR OU IGUAL QUE 5 ENTÃO INCREMENTA O INTEIRO DA MEMORIA EM 1.
		i <= 5 & write.2!(i+1) -> COMP2
	)

		-- ENVIA ID DO COMPONENTE E RECEBE UM INTEIRO DA MEMORIA ATRAVES DO CANAL READ
COMP3 = read.3?i ->
	(
		(
			-- CASO O INTEIRO LIDO DA MEMORIA SEJA IGUAL A 10 ENTÃO ESCREVE O MESMO VALOR NA MEMORIA.
			i == 10 & write.3!i -> COMP3
			
			[]

			-- CASO O INTEIRO LIDO DA MEMORIA ESTEJA NÃO-ESTRITAMENTE ENTRE 5 E 10 ENTÃO INCREMENTA O INTEIRO DA MEMORIA EM 1.
			(i < 10 and i > 5) & write.3!(i+1) -> COMP3
		)

		[]

		(
			-- CASO O INTEIRO LIDO DA MEMORIA SEJA IGUAL A 0 ENTÃO ESCREVE O MESMO VALOR NA MEMORIA.
			i == 0 & write.3!i -> COMP3
			
			[]

			-- CASO O INTEIRO LIDO DA MEMORIA ESTEJA ENTRE 0 NÃO-ESTRITO E 5 ESTRITO, ENTÃO DECREMENTA O INTEIRO DA MEMORIA EM 1.
			(i > 0 and i <= 5) & write.3!(i-1) -> COMP3
		)
	)

MEMORIA(i) = 
	(
		-- CANAL READ ESPERA RECEBER UM INTEIRO REPRESENTANDO O ID DO COMPONENTE E COMUNICA UM INTEIRO "i"
		read?comp_id!i -> MEMORIA(i)
		
		[]

		-- CANAL WRITE ESPERA RECEBER UM INTEIRO REPRESENTANDO O ID DO COMPONENTE E ESPERA RECEBER UM INTEIRO "n"
		write?comp_id?n -> MEMORIA(n)
	)

-- INTERLEAVING ENTRE COMP1, COMP2 E COMP3 COM UMA SINCRONIZACAO PARA OS EVENTOS write E read COM O PROCESSO MEMORIA.
MAIN = ((COMP1(0) ||| COMP2 ||| COMP3) [|{|write, read|}|] MEMORIA(0))
